name: release
on:
  push:
    branches:
      - main
  pull_request_target:
  workflow_dispatch:


permissions:
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  release:
    if: "!startsWith(github.head_ref, 'release-please')"
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created }}
    steps:
      - name: 获取token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: 运行 release-please-action
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json


  publish-lib:
    runs-on: ubuntu-latest
    needs: [ release ]
    if: needs.release.outputs.releases_created == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 设置 Rust 缓存
        uses: swatinem/rust-cache@v2

      - name: 发布
        run: |
          cargo publish --workspace --exclude nipaw_core --exclude nipaw_node
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_API_TOKEN }}


  build:
    needs: release
    if: needs.release.outputs['nipaw_node--release_created'] == 'true'
    uses: ./.github/workflows/build.yml

  publish-npm:
    runs-on: ubuntu-latest
    needs: [ release, build ]
    steps:
      - name: 下载npm包
        uses: actions/download-artifact@v5
        with:
          name: "npm-package"
          path: nipaw_node

      - name: 下载构建产物
        uses: actions/download-artifact@v5
        with:
          pattern: nipaw-node*
          path: nipaw_node/artifacts

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 发布npm包
        run: |
          pnpm install
          pnpm config set provenance true
          pnpm config set registry https://registry.npmjs.org/
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          pnpm run create-npm-dirs
          pnpm run artifacts
          pnpm publish --access public
        working-directory: nipaw_node
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
